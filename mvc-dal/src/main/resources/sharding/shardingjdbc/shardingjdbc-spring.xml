<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 自动扫描,applicationContext.xml中存在了 -->
    <context:component-scan base-package="com.liupeng"/>

    <!--mapperFactoryBean的配置版本-->
    <bean id="shardingMapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.liupeng.sharding.shardingjdbc.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="shardingSqlSessionFactory"/>
    </bean>

    <!--特定的sqlSessionFactoryBean-->
    <bean id="shardingSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="shardingDataSource"/>
        <property name="mapperLocations" value="classpath:sharding/shardingjdbc/mapper/*Mapper.xml"/>
    </bean>

    <!-- 对datasource进行封装 -->
    <bean id="shardingDataSource" class="com.dangdang.ddframe.rdb.sharding.api.ShardingDataSource">
        <constructor-arg ref="shardingRule"/>
    </bean>

    <!-- 特定的事务管理器 -->
    <bean id="shardingTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="shardingDataSource"/>
    </bean>
    <tx:annotation-driven transaction-manager="shardingTransactionManager"/>

    <!-- 构成分库分表的规则 传入数据源集合和每个表的分库分表的具体规则 -->
    <bean id="shardingRule" class="com.dangdang.ddframe.rdb.sharding.api.rule.ShardingRule">
        <constructor-arg index="0" ref="dataSourceRule"/>
        <constructor-arg index="1">
            <list>
                <ref bean="teacherTableRule"/>
                <ref bean="studentTableRule"/>
            </list>
        </constructor-arg>
    </bean>

    <!-- 配置好dataSourceRulue,即对数据源进行管理 -->
    <bean id="dataSourceRule" class="com.dangdang.ddframe.rdb.sharding.api.rule.DataSourceRule">
        <constructor-arg>
            <map>
                <entry key="sharding_0" value-ref="sharding_0"/>
                <entry key="sharding_1" value-ref="sharding_1"/>
            </map>
        </constructor-arg>
    </bean>

    <!-- 对t_user表的配置，进行分库配置，逻辑表名为t_user，每个库有实际的三张表 -->
    <bean id="teacherTableRule" class="com.dangdang.ddframe.rdb.sharding.api.rule.TableRule">
        <constructor-arg value="t_user" index="0"/>
        <constructor-arg index="1">
            <list>
                <value>t_user_00</value>
                <value>t_user_01</value>
                <value>t_user_02</value>
            </list>
        </constructor-arg>
        <constructor-arg index="2" ref="dataSourceRule"/>
        <constructor-arg index="3" ref="teacherDatabaseShardingStrategy"/>
        <constructor-arg index="4" ref="teacherTableShardingStrategy"/>
    </bean>

    <!-- t_user分库的sharding规则：按user_id分库 -->
    <bean id="teacherDatabaseShardingStrategy"
          class="com.dangdang.ddframe.rdb.sharding.api.strategy.database.DatabaseShardingStrategy">
        <constructor-arg index="0" value="user_id"/>
        <constructor-arg index="1">
            <bean class="com.liupeng.sharding.shardingjdbc.algorithm.TeacherSingleKeyDatabaseShardingAlgorithm">
                <property name="dbCount" value="2"/>
            </bean>
        </constructor-arg>
    </bean>

    <!-- t_user分表的sharding规则：按user_id分表 -->
    <bean id="teacherTableShardingStrategy"
          class="com.dangdang.ddframe.rdb.sharding.api.strategy.table.TableShardingStrategy">
        <constructor-arg index="0" value="user_id"/>
        <constructor-arg index="1">
            <bean class="com.liupeng.sharding.shardingjdbc.algorithm.TeacherSingleKeyTableShardingAlgorithm">
                <property name="dbCount" value="3"/>
            </bean>
        </constructor-arg>
    </bean>

    <!-- 对t_student表的配置，进行分库配置，逻辑表名为t_student，每个库有实际的两张表 -->
    <bean id="studentTableRule" class="com.dangdang.ddframe.rdb.sharding.api.rule.TableRule">
        <constructor-arg value="t_student" index="0"/>
        <constructor-arg index="1">
            <list>
                <value>t_student_00</value>
                <value>t_student_01</value>
            </list>
        </constructor-arg>
        <constructor-arg index="2" ref="dataSourceRule"/>
        <constructor-arg index="3" ref="studentDatabaseShardingStrategy"/>
        <constructor-arg index="4" ref="studentTableShardingStrategy"/>
    </bean>

    <!-- t_student分库的sharding规则：按student_id分开库 -->
    <bean id="studentDatabaseShardingStrategy"
          class="com.dangdang.ddframe.rdb.sharding.api.strategy.database.DatabaseShardingStrategy">
        <constructor-arg index="0" value="student_id"/>
        <constructor-arg index="1">
            <bean class="com.liupeng.sharding.shardingjdbc.algorithm.StudentSingleKeyDatabaseShardingAlgorithm">
                <property name="dbCount" value="2"/>
            </bean>
        </constructor-arg>
    </bean>

    <!-- t_student分表的sharding规则：按student_id分表 -->
    <bean id="studentTableShardingStrategy"
          class="com.dangdang.ddframe.rdb.sharding.api.strategy.table.TableShardingStrategy">
        <constructor-arg index="0" value="student_id"/>
        <constructor-arg index="1">
            <bean class="com.liupeng.sharding.shardingjdbc.algorithm.StudentSingleKeyTableShardingAlgorithm">
                <property name="dbCount" value="2"/>
            </bean>
        </constructor-arg>
    </bean>
</beans>