<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 配置数据库连接池 -->
    <bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <!-- MySQL数据源配置,可用于MySQL(4,5) -->
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url"
                  value="jdbc:mysql://localhost:3306/liupeng?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull"
        />
        <property name="username" value="${mysql.username}"/>
        <property name="password" value="${mysql.password}"/>
        <property name="initialSize" value="5"></property><!-- 启动时创建的连接数 -->
        <property name="maxActive" value="200"/> <!-- 连接池的最大连接数 -->
        <property name="maxIdle" value="100"/> <!-- 最大空闲值，当经过一个高峰后，连接池可以慢慢将已经用不到的连接释放一部分，一直减少到maxIdle为止 -->
        <property name="minIdle" value="20"/>  <!-- 最小空闲值，当空闲的连接数少于阙值时，连接池就会预申请一些连接，以免洪峰来时来不及申请 -->
        <property name="maxWait" value="1800000"/>
    </bean>

    <!--sqlSessionFactoryBean-->
    <bean id="mySqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="myDataSource"/>
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath:mybatis/mapper/**/*.xml"/>
    </bean>

    <!-- 扫描Mapper -->
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--<property name="annotationClass" value="org.springframework.stereotype.Repository"/>-->
        <property name="basePackage" value="com.liupeng.dao"/>
        <property name="sqlSessionFactoryBeanName" value="mySqlSessionFactory"/>
        <property name="properties">
            <value>
                mappers=com.liupeng.BaseMapper
            </value>
        </property>
    </bean>

    <!-- 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource"/>
    </bean>
    <!-- 通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 传播行为 -->
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!-- 切面 proxy-target-class="true" 表示直接使用 类 实现动态代理 -->
    <aop:config proxy-target-class="true">
        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.liupeng.service.impl.*.*(..))"/>
    </aop:config>
    <!-- 支持注解形式的事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="sqlSessionFactory" ref="mySqlSessionFactory"/>
        <property name="mapperInterface" value="com.liupeng.dao.user.UserMapper"/>
    </bean>-->
</beans>